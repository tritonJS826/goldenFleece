/* tslint:disable */
/* eslint-disable */
/**
 * Golden Fleece API
 * A simple REST API for providing basic CRUD-access to the employees in a Golden Fleece database.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiAskAdminPostRequest,
  ApiBookingRequestPostRequest,
} from '../models';
import {
    ApiAskAdminPostRequestFromJSON,
    ApiAskAdminPostRequestToJSON,
    ApiBookingRequestPostRequestFromJSON,
    ApiBookingRequestPostRequestToJSON,
} from '../models';

export interface ApiAskAdminPostOperationRequest {
    apiAskAdminPostRequest: ApiAskAdminPostRequest;
}

export interface ApiBookingRequestPostOperationRequest {
    apiBookingRequestPostRequest: ApiBookingRequestPostRequest;
}

/**
 * MailApi - interface
 * 
 * @export
 * @interface MailApiInterface
 */
export interface MailApiInterface {
    /**
     * Comment or question to admin
     * @summary Comment or question to admin
     * @param {ApiAskAdminPostRequest} apiAskAdminPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailApiInterface
     */
    apiAskAdminPostRaw(requestParameters: ApiAskAdminPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Comment or question to admin
     * Comment or question to admin
     */
    apiAskAdminPost(requestParameters: ApiAskAdminPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Customer trying to book room
     * @summary Customer trying to book room
     * @param {ApiBookingRequestPostRequest} apiBookingRequestPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailApiInterface
     */
    apiBookingRequestPostRaw(requestParameters: ApiBookingRequestPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Customer trying to book room
     * Customer trying to book room
     */
    apiBookingRequestPost(requestParameters: ApiBookingRequestPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class MailApi extends runtime.BaseAPI implements MailApiInterface {

    /**
     * Comment or question to admin
     * Comment or question to admin
     */
    async apiAskAdminPostRaw(requestParameters: ApiAskAdminPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiAskAdminPostRequest === null || requestParameters.apiAskAdminPostRequest === undefined) {
            throw new runtime.RequiredError('apiAskAdminPostRequest','Required parameter requestParameters.apiAskAdminPostRequest was null or undefined when calling apiAskAdminPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/ask-admin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiAskAdminPostRequestToJSON(requestParameters.apiAskAdminPostRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Comment or question to admin
     * Comment or question to admin
     */
    async apiAskAdminPost(requestParameters: ApiAskAdminPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiAskAdminPostRaw(requestParameters, initOverrides);
    }

    /**
     * Customer trying to book room
     * Customer trying to book room
     */
    async apiBookingRequestPostRaw(requestParameters: ApiBookingRequestPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiBookingRequestPostRequest === null || requestParameters.apiBookingRequestPostRequest === undefined) {
            throw new runtime.RequiredError('apiBookingRequestPostRequest','Required parameter requestParameters.apiBookingRequestPostRequest was null or undefined when calling apiBookingRequestPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/booking-request`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiBookingRequestPostRequestToJSON(requestParameters.apiBookingRequestPostRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Customer trying to book room
     * Customer trying to book room
     */
    async apiBookingRequestPost(requestParameters: ApiBookingRequestPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiBookingRequestPostRaw(requestParameters, initOverrides);
    }

}

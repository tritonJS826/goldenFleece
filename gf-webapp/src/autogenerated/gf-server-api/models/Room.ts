/* tslint:disable */
/* eslint-disable */
/**
 * Golden Fleece API
 * A simple REST API for providing basic CRUD-access to the employees in a Golden Fleece database.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Price } from './Price';
import {
    PriceFromJSON,
    PriceFromJSONTyped,
    PriceToJSON,
} from './Price';
import type { RoomBooked } from './RoomBooked';
import {
    RoomBookedFromJSON,
    RoomBookedFromJSONTyped,
    RoomBookedToJSON,
} from './RoomBooked';
import type { RoomPaid } from './RoomPaid';
import {
    RoomPaidFromJSON,
    RoomPaidFromJSONTyped,
    RoomPaidToJSON,
} from './RoomPaid';
import type { RoomServices } from './RoomServices';
import {
    RoomServicesFromJSON,
    RoomServicesFromJSONTyped,
    RoomServicesToJSON,
} from './RoomServices';
import type { RoomType } from './RoomType';
import {
    RoomTypeFromJSON,
    RoomTypeFromJSONTyped,
    RoomTypeToJSON,
} from './RoomType';

/**
 * 
 * @export
 * @interface Room
 */
export interface Room {
    /**
     * 
     * @type {RoomType}
     * @memberof Room
     */
    type: RoomType;
    /**
     * 
     * @type {Array<RoomServices>}
     * @memberof Room
     */
    services: Array<RoomServices>;
    /**
     * Short room's description.
     * @type {string}
     * @memberof Room
     */
    description: string;
    /**
     * The room's ID.
     * @type {string}
     * @memberof Room
     */
    id: string;
    /**
     * The room's description.
     * @type {string}
     * @memberof Room
     */
    descriptionLong: string;
    /**
     * 
     * @type {Price}
     * @memberof Room
     */
    price: Price;
    /**
     * The room's square.
     * @type {number}
     * @memberof Room
     */
    square: number;
    /**
     * Amount of adults who can stay in the room.
     * @type {number}
     * @memberof Room
     */
    adults: number;
    /**
     * Amount of children who can stay in the room.
     * @type {number}
     * @memberof Room
     */
    children: number;
    /**
     * The room's promo image URL.
     * @type {string}
     * @memberof Room
     */
    promoImgUrl: string;
    /**
     * The rooms slider images URL.
     * @type {Array<string>}
     * @memberof Room
     */
    images: Array<string>;
    /**
     * The room's rating.
     * @type {number}
     * @memberof Room
     */
    rating: number;
    /**
     * The room's number.
     * @type {number}
     * @memberof Room
     */
    roomNumber: number;
    /**
     * 
     * @type {Array<RoomBooked>}
     * @memberof Room
     */
    booked: Array<RoomBooked>;
    /**
     * 
     * @type {Array<RoomPaid>}
     * @memberof Room
     */
    paid: Array<RoomPaid>;
}

/**
 * Check if a given object implements the Room interface.
 */
export function instanceOfRoom(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "services" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "descriptionLong" in value;
    isInstance = isInstance && "price" in value;
    isInstance = isInstance && "square" in value;
    isInstance = isInstance && "adults" in value;
    isInstance = isInstance && "children" in value;
    isInstance = isInstance && "promoImgUrl" in value;
    isInstance = isInstance && "images" in value;
    isInstance = isInstance && "rating" in value;
    isInstance = isInstance && "roomNumber" in value;
    isInstance = isInstance && "booked" in value;
    isInstance = isInstance && "paid" in value;

    return isInstance;
}

export function RoomFromJSON(json: any): Room {
    return RoomFromJSONTyped(json, false);
}

export function RoomFromJSONTyped(json: any, ignoreDiscriminator: boolean): Room {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': RoomTypeFromJSON(json['type']),
        'services': ((json['services'] as Array<any>).map(RoomServicesFromJSON)),
        'description': json['description'],
        'id': json['id'],
        'descriptionLong': json['descriptionLong'],
        'price': PriceFromJSON(json['price']),
        'square': json['square'],
        'adults': json['adults'],
        'children': json['children'],
        'promoImgUrl': json['promoImgUrl'],
        'images': json['images'],
        'rating': json['rating'],
        'roomNumber': json['roomNumber'],
        'booked': ((json['booked'] as Array<any>).map(RoomBookedFromJSON)),
        'paid': ((json['paid'] as Array<any>).map(RoomPaidFromJSON)),
    };
}

export function RoomToJSON(value?: Room | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': RoomTypeToJSON(value.type),
        'services': ((value.services as Array<any>).map(RoomServicesToJSON)),
        'description': value.description,
        'id': value.id,
        'descriptionLong': value.descriptionLong,
        'price': PriceToJSON(value.price),
        'square': value.square,
        'adults': value.adults,
        'children': value.children,
        'promoImgUrl': value.promoImgUrl,
        'images': value.images,
        'rating': value.rating,
        'roomNumber': value.roomNumber,
        'booked': ((value.booked as Array<any>).map(RoomBookedToJSON)),
        'paid': ((value.paid as Array<any>).map(RoomPaidToJSON)),
    };
}


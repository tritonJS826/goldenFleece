/* tslint:disable */
/* eslint-disable */
/**
 * Golden Fleece API
 * A simple REST API for providing basic CRUD-access to the employees in a Golden Fleece database.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  NewRoom,
  Room,
} from '../models';
import {
    NewRoomFromJSON,
    NewRoomToJSON,
    RoomFromJSON,
    RoomToJSON,
} from '../models';

export interface ApiRoomsPostRequest {
    newRoom: NewRoom;
}

/**
 * RoomsApi - interface
 * 
 * @export
 * @interface RoomsApiInterface
 */
export interface RoomsApiInterface {
    /**
     * Retrieve a list of all rooms
     * @summary Get list of rooms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApiInterface
     */
    apiRoomsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Room>>>;

    /**
     * Retrieve a list of all rooms
     * Get list of rooms
     */
    apiRoomsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Room>>;

    /**
     * Add new room
     * @summary Add new room
     * @param {NewRoom} newRoom 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApiInterface
     */
    apiRoomsPostRaw(requestParameters: ApiRoomsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NewRoom>>;

    /**
     * Add new room
     * Add new room
     */
    apiRoomsPost(requestParameters: ApiRoomsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NewRoom>;

}

/**
 * 
 */
export class RoomsApi extends runtime.BaseAPI implements RoomsApiInterface {

    /**
     * Retrieve a list of all rooms
     * Get list of rooms
     */
    async apiRoomsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Room>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/rooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoomFromJSON));
    }

    /**
     * Retrieve a list of all rooms
     * Get list of rooms
     */
    async apiRoomsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Room>> {
        const response = await this.apiRoomsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Add new room
     * Add new room
     */
    async apiRoomsPostRaw(requestParameters: ApiRoomsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NewRoom>> {
        if (requestParameters.newRoom === null || requestParameters.newRoom === undefined) {
            throw new runtime.RequiredError('newRoom','Required parameter requestParameters.newRoom was null or undefined when calling apiRoomsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/rooms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewRoomToJSON(requestParameters.newRoom),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NewRoomFromJSON(jsonValue));
    }

    /**
     * Add new room
     * Add new room
     */
    async apiRoomsPost(requestParameters: ApiRoomsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NewRoom> {
        const response = await this.apiRoomsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * Golden Fleece API
 * A simple REST API for providing basic CRUD-access to the employees in a Golden Fleece database.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Room,
} from '../models';
import {
    RoomFromJSON,
    RoomToJSON,
} from '../models';

export interface ApiRoomsRoomIdDeleteRequest {
    roomId: string;
}

export interface ApiRoomsRoomIdGetRequest {
    roomId: string;
}

export interface ApiRoomsRoomIdPutRequest {
    roomId: string;
    room: Room;
}

/**
 * RoomApi - interface
 * 
 * @export
 * @interface RoomApiInterface
 */
export interface RoomApiInterface {
    /**
     * Delete a room by ID
     * @summary Delete room by ID
     * @param {string} roomId room ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApiInterface
     */
    apiRoomsRoomIdDeleteRaw(requestParameters: ApiRoomsRoomIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a room by ID
     * Delete room by ID
     */
    apiRoomsRoomIdDelete(requestParameters: ApiRoomsRoomIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Retrieve a room by ID
     * @summary Get room by ID
     * @param {string} roomId room ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApiInterface
     */
    apiRoomsRoomIdGetRaw(requestParameters: ApiRoomsRoomIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Room>>;

    /**
     * Retrieve a room by ID
     * Get room by ID
     */
    apiRoomsRoomIdGet(requestParameters: ApiRoomsRoomIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Room>;

    /**
     * Update room by ID
     * @summary Update room information by ID
     * @param {string} roomId room ID
     * @param {Room} room 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApiInterface
     */
    apiRoomsRoomIdPutRaw(requestParameters: ApiRoomsRoomIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Room>>;

    /**
     * Update room by ID
     * Update room information by ID
     */
    apiRoomsRoomIdPut(requestParameters: ApiRoomsRoomIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Room>;

}

/**
 * 
 */
export class RoomApi extends runtime.BaseAPI implements RoomApiInterface {

    /**
     * Delete a room by ID
     * Delete room by ID
     */
    async apiRoomsRoomIdDeleteRaw(requestParameters: ApiRoomsRoomIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.roomId === null || requestParameters.roomId === undefined) {
            throw new runtime.RequiredError('roomId','Required parameter requestParameters.roomId was null or undefined when calling apiRoomsRoomIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/rooms/{room_id}`.replace(`{${"room_id"}}`, encodeURIComponent(String(requestParameters.roomId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a room by ID
     * Delete room by ID
     */
    async apiRoomsRoomIdDelete(requestParameters: ApiRoomsRoomIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiRoomsRoomIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a room by ID
     * Get room by ID
     */
    async apiRoomsRoomIdGetRaw(requestParameters: ApiRoomsRoomIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Room>> {
        if (requestParameters.roomId === null || requestParameters.roomId === undefined) {
            throw new runtime.RequiredError('roomId','Required parameter requestParameters.roomId was null or undefined when calling apiRoomsRoomIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/rooms/{room_id}`.replace(`{${"room_id"}}`, encodeURIComponent(String(requestParameters.roomId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomFromJSON(jsonValue));
    }

    /**
     * Retrieve a room by ID
     * Get room by ID
     */
    async apiRoomsRoomIdGet(requestParameters: ApiRoomsRoomIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Room> {
        const response = await this.apiRoomsRoomIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update room by ID
     * Update room information by ID
     */
    async apiRoomsRoomIdPutRaw(requestParameters: ApiRoomsRoomIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Room>> {
        if (requestParameters.roomId === null || requestParameters.roomId === undefined) {
            throw new runtime.RequiredError('roomId','Required parameter requestParameters.roomId was null or undefined when calling apiRoomsRoomIdPut.');
        }

        if (requestParameters.room === null || requestParameters.room === undefined) {
            throw new runtime.RequiredError('room','Required parameter requestParameters.room was null or undefined when calling apiRoomsRoomIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/rooms/{room_id}`.replace(`{${"room_id"}}`, encodeURIComponent(String(requestParameters.roomId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RoomToJSON(requestParameters.room),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomFromJSON(jsonValue));
    }

    /**
     * Update room by ID
     * Update room information by ID
     */
    async apiRoomsRoomIdPut(requestParameters: ApiRoomsRoomIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Room> {
        const response = await this.apiRoomsRoomIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

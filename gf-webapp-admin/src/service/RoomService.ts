import {RoomApi} from "src/autogenerated/gf-server-api/apis/RoomApi";
import {RoomsApi} from "src/autogenerated/gf-server-api/apis/RoomsApi";
import {Room as RoomDTO} from "src/autogenerated/gf-server-api/models/Room";
import {Room} from "src/model/Room/Room";
import {Price} from "src/model/Price";
import {Currency} from "src/model/Currency";
import {Apartments} from "src/model/Room/Apartments";
import {NewRoom} from "src/model/Room/NewRoom";
import {ApartmentServices} from "src/model/Room/ApartmentServices";

/**
 * @description Temporary function. Will be deleted after receiving a correct response from the server
 */

const roomDTOToBusinessConverter = (roomRaw: RoomDTO) => new Room({
  ...roomRaw,
  price: new Price(Currency[roomRaw.price.currency], roomRaw.price.amount),
  apartmentsType: Apartments[roomRaw.apartmentsType],
  services: roomRaw.services.map((service) => ApartmentServices[service]),
});


export const saveRoom = async (room: Room) => {
  const roomApi = new RoomApi;
  try {
    await roomApi.apiRoomsRoomIdPut({
      roomId: room.id,
      room: new Room({
        ...room,
        price: new Price(room.price.toJSON()),
      }),
    });
  } catch (error) {
    console.log(error);
  }
};

export const getRooms = async () => {
  const roomsApi = new RoomsApi;
  const roomsRaw: RoomDTO[] = await roomsApi.apiRoomsGet();

  // Converting types TODO: remove converter after back adjusting
  const rooms = roomsRaw.map(roomDTOToBusinessConverter);
  return rooms;
};

export const getRoom = async (id: string) => {
  const roomApi = new RoomApi;
  const roomRaw: RoomDTO = await roomApi.apiRoomsRoomIdGet({roomId: id});

  // Converting types TODO: remove converter after back adjusting
  const room = roomDTOToBusinessConverter(roomRaw);
  return room;
};

export const deleteRoom = async (id: string) => {
  const roomApi = new RoomApi;
  await roomApi.apiRoomsRoomIdDelete({roomId: id});
};

export const postRoom = async (room: NewRoom) => {
  const roomsApi = new RoomsApi;
  await roomsApi.apiRoomsPost({newRoom: room});
};
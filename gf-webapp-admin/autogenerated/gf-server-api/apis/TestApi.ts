/* tslint:disable */
/* eslint-disable */
/**
 * Golden Fleece API
 * A simple REST API for providing basic CRUD-access to the employees in a Golden Fleece database.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiRoomsGetRequest,
} from '../models';
import {
    ApiRoomsGetRequestFromJSON,
    ApiRoomsGetRequestToJSON,
} from '../models';

export interface ApiRoomsPostRequest {
    apiRoomsGetRequest: ApiRoomsGetRequest;
}

/**
 * TestApi - interface
 * 
 * @export
 * @interface TestApiInterface
 */
export interface TestApiInterface {
    /**
     * Comment or question to admin
     * @summary Comment or question to admin
     * @param {ApiRoomsGetRequest} apiRoomsGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApiInterface
     */
    apiRoomsPostRaw(requestParameters: ApiRoomsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Comment or question to admin
     * Comment or question to admin
     */
    apiRoomsPost(requestParameters: ApiRoomsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class TestApi extends runtime.BaseAPI implements TestApiInterface {

    /**
     * Comment or question to admin
     * Comment or question to admin
     */
    async apiRoomsPostRaw(requestParameters: ApiRoomsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiRoomsGetRequest === null || requestParameters.apiRoomsGetRequest === undefined) {
            throw new runtime.RequiredError('apiRoomsGetRequest','Required parameter requestParameters.apiRoomsGetRequest was null or undefined when calling apiRoomsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/rooms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiRoomsGetRequestToJSON(requestParameters.apiRoomsGetRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Comment or question to admin
     * Comment or question to admin
     */
    async apiRoomsPost(requestParameters: ApiRoomsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiRoomsPostRaw(requestParameters, initOverrides);
    }

}
